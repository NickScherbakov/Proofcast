const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
const api = axios.create({
    timeout: 5000,
    headers: {
        'Content-Type': 'application/json'
    }
});

// –ë–∞–∑–æ–≤—ã–µ URL —Å–µ—Ä–≤–∏—Å–æ–≤
const CORE_URL = 'http://localhost:8080';
const VERIFIER_URL = 'http://localhost:8081';
const UI_URL = 'http://localhost:3000';

async function waitForService(url, serviceName, maxAttempts = 10) {
    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ${serviceName}...`);
    
    for (let i = 0; i < maxAttempts; i++) {
        try {
            await api.get(`${url}/health`);
            console.log(`‚úÖ ${serviceName} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`);
            return true;
        } catch (error) {
            console.log(`   –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxAttempts} - ${serviceName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
    
    throw new Error(`‚ùå ${serviceName} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
}

async function createProof(eventData) {
    try {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ proof –¥–ª—è —Å–æ–±—ã—Ç–∏—è:', eventData);
        
        const response = await api.post(`${CORE_URL}/api/proofs`, {
            event: eventData,
            timestamp: new Date().toISOString()
        });
        
        console.log('‚úÖ Proof —Å–æ–∑–¥–∞–Ω:', response.data.proofId);
        return response.data.proofId;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è proof:', error.message);
        throw error;
    }
}

async function verifyProof(proofId) {
    try {
        console.log('üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è proof:', proofId);
        
        const response = await api.get(`${VERIFIER_URL}/api/verify/${proofId}`);
        
        if (response.data.valid) {
            console.log('‚úÖ Proof –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
            console.log('‚ö†Ô∏è Proof –Ω–µ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é');
        }
        
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
        throw error;
    }
}

async function runDemo() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Proofcast Demo\n');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        await waitForService(CORE_URL, 'Core Service');
        await waitForService(VERIFIER_URL, 'Verifier Service');
        
        // –î–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–π
        console.log('\nüìã –î–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–π: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\n');
        
        const sampleEvent = {
            type: 'financial_transaction',
            amount: 1000,
            from: 'account_001',
            to: 'account_002',
            description: 'Demo payment for Proofcast verification'
        };
        
        // –°–æ–∑–¥–∞–µ–º proof
        const proofId = await createProof(sampleEvent);
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º proof
        const verificationResult = await verifyProof(proofId);
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ:');
        console.log('   - Proof ID:', proofId);
        console.log('   - –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', verificationResult.valid ? '‚úÖ –í–∞–ª–∏–¥–µ–Ω' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω');
        console.log('   - UI –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', UI_URL);
        
        console.log('\nüéâ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('\nüí• –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ:', error.message);
        console.log('\nüîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
        console.log('   1. –ó–∞–ø—É—â–µ–Ω docker-compose: npm run docker:up');
        console.log('   2. –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏ healthcheck –ø—Ä–æ—Ö–æ–¥–∏—Ç');
        console.log('   3. –ü–æ—Ä—Ç—ã 8080, 8081, 3000 —Å–≤–æ–±–æ–¥–Ω—ã');
        process.exit(1);
    }
}

if (require.main === module) {
    runDemo();
}

module.exports = { createProof, verifyProof, runDemo };